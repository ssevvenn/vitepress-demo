import{_ as t,o as s,c as a,O as n}from"./chunks/framework.66cc414a.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{"prev":false,"next":false},"headers":[],"relativePath":"markdown/chapter-7/chapter-7.2.4/index.md","filePath":"markdown/chapter-7/chapter-7.2.4/index.md"}'),l={name:"markdown/chapter-7/chapter-7.2.4/index.md"},o=n(`<h3 id="合约调用" tabindex="-1">合约调用 <a class="header-anchor" href="#合约调用" aria-label="Permalink to &quot;合约调用&quot;">​</a></h3><h4 id="pbcct-do【contractcalltxbody】" tabindex="-1">pbCCT.do【ContractCallTxBody】 <a class="header-anchor" href="#pbcct-do【contractcalltxbody】" aria-label="Permalink to &quot;pbCCT.do【ContractCallTxBody】&quot;">​</a></h4><ul><li>接口地址</li></ul><p>clt/pbCCT.do</p><ul><li>功能描述</li></ul><p>构建合约调用上链交易体。构建好的交易体使用pbST.do完成真正的提交操作。</p><ul><li>Header参数</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>取值</th></tr></thead><tbody><tr><td>Content-Type</td><td>string</td><td>application/json</td></tr><tr><td>sys_sign_ts</td><td>long</td><td>获取当前时间，并转换成long类型。调用接口的业务系统数字身份签名时间戳</td></tr><tr><td>biz_id</td><td>string</td><td>要访问链上业务域的唯一标识</td></tr><tr><td>sys_sign</td><td>string</td><td>调用接口的业务系统身份确权签名结果 sys_sign的生成方法：</td></tr><tr><td>分别将biz_id、sys_sign_ts转换成Byte[] 将ReqGenContractCallTxBody通过Protobuf序列化成Byte[]</td><td></td><td></td></tr><tr><td>依据如下顺序拼接成一个Byte[]： ➀biz_id + ➁ReqGenContractCallTxBody + ➂sys_sign_ts</td><td></td><td></td></tr><tr><td>用业务系统数字身份私钥，通过从法链提供的签名类库对第3步拼接好的Byte[]进行签名，并获得的签名结果即为sys_sign</td><td></td><td></td></tr></tbody></table><ul><li>输入参数</li></ul><table><thead><tr><th>参数构造格式</th><th>Protobuf Message</th></tr></thead><tbody><tr><td>message ReqGenContractCallTxBody { string callerID = 1; //合约调用者数字身份标识 string</td><td></td></tr><tr><td>scAddress = 2; //要调用的链上合约地址 string scParam = 3; //合约方法调用参数，按照合约定义的格式进行调用参数构造 }</td><td></td></tr></tbody></table><ul><li>调用返回</li></ul><table><thead><tr><th>返回信息格式</th><th>Protobuf Message的JSON格式序列化结果</th></tr></thead><tbody><tr><td>message RespGenContractCallTxBody { int32 retCode = 1; //返值码 string retMsg =</td><td></td></tr><tr><td>2; //描述信息 string txBody = 3; //上链交易体 }</td><td></td></tr></tbody></table><ul><li>调用方法</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--request</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">POST</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:8000/fbs/clt/pbCCT.do</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--header</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Type: application/json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--header</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sys_sign_ts: 1600328025054</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--header</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">biz_id: 861e59478373702a9b8c7b848a22a32feed5d20a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--header</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sys_sign: fb992aa4445d80a7fef9d03b5b6ea6b6613b2f7960be403dc964194fd4f4d375f51e67e48a8e31e539c3ee4007eb9a75fa7739fa5d9b32e0816afe38f0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--data-raw</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#C3E88D;">        &quot;callerID&quot;:&quot;0d64ad368ebc37ddb80424376408cb7bb88ff328&quot;,</span></span>
<span class="line"><span style="color:#C3E88D;">        &quot;scAddress&quot;:&quot;1eb48bb28962e52896288021b73c04a437bac878&quot;,</span></span>
<span class="line"><span style="color:#C3E88D;">        &quot;scParam&quot;:&quot;{\\&quot;参数1\\&quot;:\\&quot;参数值1\\&quot;,\\&quot;参数2\\&quot;:\\&quot;参数值2\\&quot;}&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">    }</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>| &quot;data-raw&quot;为ReqGenContractCallTxBody（Protobuf Message）的JSON格式序列化结果 |</p><ul><li>异常信息</li></ul>`,16),e=[o];function p(r,d,c,i,C,y){return s(),a("div",null,e)}const u=t(l,[["render",p]]);export{b as __pageData,u as default};
